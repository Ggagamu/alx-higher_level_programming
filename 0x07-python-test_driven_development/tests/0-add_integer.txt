This is the test documentation for ``0-add_integer`` module
======================

Uses  ``add_integer`` and only adds two integers.
------------------------------------------------

Importing the function from the module:
	>>> add_integer = __import__("0-add_integer").add_integer

Checking for module docstring:
	 >>> m_doc = __import__("0-add_integer").__doc__
	 >>> len(m_doc) > 1
	 True

Checking for function docstring:
	 >>> f_doc = __import__("0-add_integer").add_integer.__doc__
         >>> len(f_doc) > 1
         True

Checking regular addition:
	 >>> add_integer(4, 3)
	 7

Checking positive with negative:
	 >>> add_integer(3, -4)
	 -1

Checking negative with positive:
	 >>> add_integer(-3, 4)
	 1

Checking float with int:
	 >>> add_integer(0.5, 4)
	 4

Checking int with float:
	 >>> add_integer(3, 7.8)
	 10

Checking both float:
	 >>> add_integer(7.55, 2.22)
	 9

Checking for passed NaN:
	 >>> add_integer(1, float('nan'))
	 Traceback (most recent call last):
	 ...
	 ValueError: cannot convert float NaN to integer

Checking long long int:
	 >>> add_integer(899999999999999999999999999999, 1)
	 900000000000000000000000000000

Checking non-number with number:
	 >>> add_integer([1], 2)
	 Traceback (most recent call last):
	 ...
	 TypeError: a must be an integer

Checking no args:
	 >>> add_integer()
	 Traceback (most recent call last):
	 ...
	 TypeError: add_integer() missing 2 required positional arguments: 'a' and 'b'

Checking one arg:
	 >>> add_integer(1)
	 Traceback (most recent call last):
         ...
	 TypeError: add_integer() missing 1 required positional argument: 'b'

Checking more than 2 args:
	 >>> add_integer(1, 2, 3)
         Traceback (most recent call last):
         ...
         TypeError: add_integer() takes 2 positional arguments but 3 were given
